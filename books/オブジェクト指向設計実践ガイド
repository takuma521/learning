# 1. オブジェクト指向設計

この本の主題はオブジェクト指向ソフトウェアの設計。

オブジェクト指向設計の手法を学ぶにはオブジェクトの世界へ没入すること。
オブジェクト指向の視点を手に入れればよい。

この章では、
オブジェクト指向せっけについての一般的な議論を述べ設計の下敷きとなる議論ができたら、
その後に設計をいつ行うかとその良し悪しをどのように判断するかを説明する。
最後にオブジェクト指向設計の概要を説明する。

## 1.1 設計の賞賛
ソフトウェアは目的があって作られる。
楽しさと生産性は重なる
オブジェクト指向設計の手法に従えば費用効果の高いソフトウェアを産み出し、楽しく取り組めるコードで実現できる。

アプリケーションには変更が訪れるもの。
変更の必要性こそが設計を重要にする。
変更が容易なものは拡張するにも楽しい。変更を拒むものは逆。

オブジェクト指向のアプリケーションは部品から構成され、相互に作用しあい全体の振る舞いが生まれる。
部品はオブジェクト。
相互作用がメッセージで送り手が受けてのことを知る必要がある。この知識が２つのオブジェクト間に依存間液を作り出す。
この依存関係が変更を邪魔する。
オブジェクト指向設計とは依存関係を管理すること。
設計がないと管理されていない依存関係が大混乱を引き起こす。
オブジェクト１つを変更すると一緒に動くオブジェクトにも変更を加えることになる。
アプリが小さければ設計が貧弱でも耐えられるが、将来大きなアプリに育つ場合、開発を妨げる原因になる。

設計が難しい利用の１つは、現在の機能のコードをただ書くのではなく、その後の変更も受け入れられる物を作らなければならないこと。
設計において、未来を考慮するとは、何が起こるか予測するのでなく、将来何かが起こると認め受け入れるための選択肢を設計者に残すこと。
設計の目的は後にでも設計できるようにすること。
その目標は変更コストの削減。

## 1.2 設計の道具

設計とは決められた１連のルールに従う行為ではない。
設計は枝分かれをする道を進む旅であり、分かれ道の決断で未来が左右される。

オブジェクト指向設計者は原則とパターンという道具を持つ。

設計原則
SOLIDとはオブジェクト指向設計でよく知られている５原則。
Single Responsibility 単一責任
Open-Closed オープンクローズド
Liskov Substitution リスコフの置換
Interface Segregation インターフェース分離
Dependency Inversion 依存性逆転
これらの原則は誰かがコードを書いている間に選んだ選択肢。
これらの良い設計のための原則は計測できる事実に基づいている。

デザインパターン
一般的に共通する問題に同じ名前をつけて同じ手法で解決し明確にする。
ただ間違って乱用すると混乱を招いてしまう。

## 1.3 設計の行為
設計原則とパターンが普及しても設計で大変なことはたくさんある。

設計が失敗する原因は設計が十分でないこと。
設計の初歩を知らなくても動くアプリケーションは作れるが、次第に変更できなくなる。

少し経験を積んだオブジェクト指向設計の手法を知ってはいるものの適用方法がわかっていないプログラマーの場合、良かれと思い設計しすぎてしまう。
そのため変更の要求に対して、それをやる設計はしていないため機能を追加できないと答える。

最終的に設計の行為と実装の行為が乖離した時に失敗する。
設計とは全身的な発見のプロセスであるから、適度な時間ごとに繰り返しフィードバックを行うべき。
なので、アジャイル開発はオブジェクト指向アプリケーション開発にうってつけ。
必要な調整が分かる前に設計をしてしまうと変更が難しくなってしまう。




